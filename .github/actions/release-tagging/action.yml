name: Auto Release
description: Github Auto Tag and Release Creation

inputs:
  user_email:
    description: "User email for git config"
    required: true
  user_name:
    description: "User name for git config"
    required: true
  release_type:
    description: "Type of action, can be 'auto' for minor or 'major' for major version update"
    required: true
    default: "auto"
  version_format:
    description: "Version format, can be 'single' for v1, v2, etc., or 'major.minor' for standard format"
    required: true
    default: "major.minor"

# outputs:
#   new_tag:
#     description: "The newly created tag"

runs:
  using: "composite"
  steps:
  - name: Checkout Code
    uses: actions/checkout@v3

  - name: Set Git Config
    run: |
      git config --global user.email "${{ inputs.user_email }}"
      git config --global user.name "${{ inputs.user_name }}"
    shell: bash

  - name: Check for Existing Tags and Create
    id: check_tags
    run: |
      echo ${{ inputs.release_type }}
      version_format=${{ inputs.version_format }}
      tags=$(git ls-remote --tags origin)

      if [ -z "$tags" ]; then
        echo "No tags found."
        if [ "${{ inputs.version_format }}" = "single" ]; then
          tag="v1"
        elif [ "${{ inputs.version_format }}" = "major.minor" ]; then
          tag="v1.0"
        else
          echo "Invalid version format specified."
          exit 1
        fi
        git tag -a "$tag" -m "Initial release"
        git push origin "$tag"
        echo "::set-output name=new_tag::$tag"
      else
        remote_tags="$(git ls-remote --tags origin | grep 'refs/tags/' | grep -v '\^{}' | awk -F'/' '{print $NF}' | sort -V | tail -n 1)"
        echo "$remote_tags"

        is_major_minor=null
        if [[ "$remote_tags" =~ ^v[0-9]+\.[0-9]+$ ]]; then
          is_major_minor=true
        elif [[ "$remote_tags" =~ ^v[0-9]+$ ]]; then
          is_major_minor=false
        else
          echo "The tag $remote_tags does not match expected formats."
        fi
        echo "$is_major_minor"

        # Function to increment the major version
        increment_major_version() {
          local tag="$1"
          local major=$(echo "$tag" | sed -E 's/v([0-9]+).*/\1/')
          local new_major=$((major + 1))
          echo "v$new_major"
        }

        # Function to convert major.minor format to single format and increment major
        convert_major_minor_to_single() {
          local tag="$1"
          local major=$(echo "$tag" | sed -E 's/v([0-9]+)\.[0-9]+/\1/')
          local new_major=$((major + 1))
          echo "v$new_major"
        }

        # Function to convert single format to major.minor format
        convert_single_to_major_minor() {
          local tag="$1"
          local major=$(echo "$tag" | sed -E 's/v([0-9]+).*/\1/')
          echo "v$major.0"
        }

        # Determine the new tag based on the format and version_format input
        if [ "$is_major_minor" = true ]; then
          if [ "$version_format" = "single" ]; then
            new_tag=$(convert_major_minor_to_single "$remote_tags")
          else
            new_tag="$remote_tags"  # Keep as it is
          fi
        else
          if [ "$version_format" = "major.minor" ]; then
            new_tag=$(convert_single_to_major_minor "$remote_tags")
            new_tag=$(increment_major_version "$new_tag")  # Increment major for major.minor format
          else
            new_tag="$remote_tags"  # Keep as it is
          fi
        fi        

        echo "$new_tag"

      fi
    shell: bash


